/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF     0
#define NUM     1
#define NAV     2

/ {
macros {
  #define OS_LEAD  &kp RALT &kp U  // OS specific sequence to initialize unicode
  #define OS_TRAIL &kp RET         // OS specific sequence to terminate unicode

  ntil: ntil { 
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <OS_LEAD &kp 0 &kp 0 &kp D &kp 1 OS_TRAIL>;
  };

  ntilup: ntilup { 
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <OS_LEAD &kp 0 &kp 0 &kp F &kp 1 OS_TRAIL>;
  };

  qmkdn: qmkdn {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <OS_LEAD &kp 0 &kp 0 &kp B &kp F OS_TRAIL>;
  };

  excldn: excldn {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <OS_LEAD &kp 0 &kp 0 &kp A &kp 1 OS_TRAIL>;
  };

  accut: accut {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <OS_LEAD &kp 0 &kp 0 &kp B &kp 4 OS_TRAIL>;
  };

  pss: pss {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    wait-ms = <5>;
    tap-ms = <5>;
    bindings = <&kp I &kp I&kp P &kp S &kp U &kp M &kp E &kp S &kp S &kp E &kp RET>;
  };

  locks: locks {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&macro_press &kp LCTRL &kp LGUI>
        , <&macro_tap &kp Q>
        , <&macro_release &kp LCTRL &kp LGUI>
        ;
  };

  copies: copies {
    compatible = "zmk,behavior-macro";
    #binding-cells = <0>;
    bindings
        = <&macro_press &kp LGUI &kp LSHFT>
        , <&macro_tap &kp 4>
        , <&macro_release &kp LGUI &kp LSHFT>
        ;
  };
};
};

/ {
  keymap {
    compatible = "zmk,keymap";

    // -----------------------------------------------------------------------------------------
    default_layer {
      bindings = <
       &none  &kp Q        &kp W   &kp E  &kp R       &kp T       &kp Y  &kp U       &kp I      &kp O     &kp P          &none  
       &none  &lt NAV A    &kp S   &kp D  &lt NUM F   &kp G       &kp H  &lt NUM J   &kp K      &kp L     &lt NAV ENTER  &none
       &none  &mt LCTRL Z  &kp X   &kp C  &mt LALT V  &kp B       &kp N  &kp M       &kp COMMA  &kp DOT   &kp BSPC       &none
              &mt LGUI TAB  &mt LSHIFT ESC     &none              &none  &mt RSHIFT SPACE       &kp CAPS      
      >;
    };

    // -----------------------------------------------------------------------------------------
    lower_layer {
      bindings = <
       &trans  &kp EXCL   &kp AT    &kp HASH   &kp DLLR  &kp PRCNT        &kp N7  &kp N8      &kp N9    &kp N0     &kp STAR   &trans
       &trans  &kp AMPS   &kp PIPE  &kp TILDE  &kp LPAR  &kp RPAR         &kp N4  &kp N5      &kp N6    &kp PLUS   &kp MINUS  &trans
       &trans  &kp UNDER  &kp BSLH  &kp CARET  &kp LBKT  &kp RBKT         &kp N1  &kp N2      &kp N3    &kp EQUAL  &kp FSLH   &trans
                            &kp LBRC   &kp RBRC  &trans                   &trans   &kp QMARK   &kp SEMI      
      >;
    };

    // -----------------------------------------------------------------------------------------
    raise_layer {
      bindings = <
       &trans  &bt BT_CLR    &kp BT_SEL 0  &kp BT_SEL 1  &kp BT_SEL 2  &kp C_MUTE       &kp C_VOL_UP  &kp C_VOL_DN  &kp C_NEXT   &kp C_PREV  &kp C_PP  &trans
       &trans  &out OUT_TOG  &out OUT_USB  &out OUT_BLE  &kp C_BRI_DN  &kp C_BRI_UP     &kp LEFT      &kp DOWN      &kp UP       &kp RIGHT   &ntil     &trans
       &trans  &kp GRAVE     &ntilup       &kp RIGHT     &kp RIGHT     &kp HOME         &qmkdn        &kp COLON     &kp SQT      &kp DQT     &accut    &trans
                                   &locks        &copies       &trans                   &trans         &excldn     &pss 


        
       // &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
       // &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
       // &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
       //                           &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT
      >;
    };

  };
};
